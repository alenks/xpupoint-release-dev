#!/bin/bash

# Usage: ./run_testcases.sh <testcase|all>

SCR_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
UTILS_PATH="${SCR_DIR}/../../utils"

show_usage() {
  echo "Usage: $0 <testcase|all>"
  echo "  all: Run all testcases"
  echo ""
  echo "Available testcases:"
  for testcase in tests/*/; do
    if [ -d "$testcase" ]; then
      printf "  %s" "$(basename "$testcase")"
    fi
  done
  echo ""
}

run_testcase() {
  local testcase=$1
  local testdir="tests/$testcase"
  
  if [ ! -d "$testdir" ]; then
    echo "[XPUPOINT] Error: Testcase '$testcase' does not exist!"
    return 1
  fi
  
  echo "[XPUPOINT] Running testcase: $testcase"
  
  cd "$testdir" || {
    echo "[XPUPOINT] Error: Cannot enter directory $testdir"
    return 1
  }
  
  # Run XPU-Profiler script
  if [ -f "run.xpuprofiler.sh" ]; then
    echo "[XPUPOINT] Running XPU-Profiler"
    bash run.xpuprofiler.sh
    profiler_exit_code=$?
    
    if [ $profiler_exit_code -eq 0 ]; then
      # Find the results directory
      results_dir=$(find . -maxdepth 1 -type d -name "*results*" -o -name "*profile*" -o -name "*output*" | head -n 1)
      if [ -z "$results_dir" ]; then
        # If no standard results directory found, look for newest directory
        results_dir=$(ls -dt */ 2>/dev/null | grep -v "^\./" | head -n 1 | sed 's/\/$//')
      fi
      
      if [ -n "$results_dir" ] && [ -f "${UTILS_PATH}/run-xpupoint-analysis.py" ]; then
        echo "[XPUPOINT] Running XPU-Point analysis on $results_dir"
        python3 ${UTILS_PATH}/run-xpupoint-analysis.py "$results_dir"
        analysis_exit_code=$?
        if [ $analysis_exit_code -ne 0 ]; then
          echo "[XPUPOINT] Warning: XPU-Point analysis failed"
        fi
      else
        echo "[XPUPOINT] Warning: Could not find results directory or analysis script, skipping analysis"
      fi
      
      echo "[XPUPOINT] Running XPU-Timer"
      bash run.xputimer.sh
      timer_exit_code=$?
    else
      echo "[XPUPOINT] XPU-Profiler failed, skipping analysis and XPU-Timer"
      timer_exit_code=1
    fi
  else
    echo "[XPUPOINT] Error: No XPU-Profiler script found in $testdir"
    cd - > /dev/null
    return 1
  fi
  
  cd - > /dev/null
  
  if [ $profiler_exit_code -eq 0 ] && [ $timer_exit_code -eq 0 ]; then
    echo "[XPUPOINT] Testcase '$testcase' completed successfully"
    return 0
  else
    echo "[XPUPOINT] Testcase '$testcase' failed"
    return 1
  fi
}

# Mainline
if [ $# -eq 0 ]; then
  show_usage
  exit 1
fi

case "$1" in
  "all")
    echo "[XPUPOINT] Running all testcases"
    failed_tests=()
    successful_tests=()
    
    for testcase_dir in tests/*/; do
      if [ -d "$testcase_dir" ]; then
        testcase=$(basename "$testcase_dir")
        if run_testcase "$testcase"; then
          successful_tests+=("$testcase")
        else
          failed_tests+=("$testcase")
        fi
        echo ""
      fi
    done
    
    echo "[XPUPOINT] Successful tests (${#successful_tests[@]}): ${successful_tests[*]}"
    echo "[XPUPOINT] Failed tests (${#failed_tests[@]}): ${failed_tests[*]}"
    
    if [ ${#failed_tests[@]} -eq 0 ]; then
      echo "[XPUPOINT] All tests completed successfully!"
      exit 0
    else
      exit 1
    fi
    ;;
  "help"|"-h"|"--help")
    show_usage
    exit 0
    ;;
  *)
    # Single testcase
    run_testcase "$1"
    exit $?
    ;;
esac
